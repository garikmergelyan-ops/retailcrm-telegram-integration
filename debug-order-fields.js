const axios = require('axios');
require('dotenv').config();

async function debugOrderFields() {
    try {
        const retailcrmUrl = process.env.RETAILCRM_URL;
        const apiKey = process.env.RETAILCRM_API_KEY;
        
        if (!retailcrmUrl || !apiKey) {
            console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RetailCRM');
            return;
        }

        console.log('üîç –ü–æ–ª—É—á–∞—é –∑–∞–∫–∞–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ–π...');
        console.log('URL:', retailcrmUrl);
        console.log('API Key:', apiKey.substring(0, 10) + '...');
        
        const response = await axios.get(`${retailcrmUrl}/api/v5/orders`, {
            params: { 
                apiKey,
                limit: 20
            }
        });

        if (response.data.success && response.data.orders && response.data.orders.length > 0) {
            console.log('\nüìä –ê–ù–ê–õ–ò–ó –°–¢–ê–¢–£–°–û–í –ó–ê–ö–ê–ó–û–í:');
            console.log('=' .repeat(50));
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            const statusGroups = {};
            response.data.orders.forEach(order => {
                const status = order.status;
                if (!statusGroups[status]) {
                    statusGroups[status] = [];
                }
                statusGroups[status].push(order.number || order.id);
            });
            
            console.log('üìã –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤:');
            Object.entries(statusGroups).forEach(([status, orders]) => {
                console.log(`  ${status}: ${orders.length} –∑–∞–∫–∞–∑–æ–≤`);
            });
            
            // –ò—â–µ–º –∑–∞–∫–∞–∑—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            const order = response.data.orders[0];
            
            // –ò—â–µ–º approved –∑–∞–∫–∞–∑ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            const approvedOrder = response.data.orders.find(o => o.status === 'approved');
            if (approvedOrder) {
                console.log('\nüéØ –ê–ù–ê–õ–ò–ó APPROVED –ó–ê–ö–ê–ó–ê:');
                console.log('=' .repeat(50));
                console.log('üîë ID –∑–∞–∫–∞–∑–∞:', approvedOrder.id);
                console.log('üìù –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:', approvedOrder.number);
                console.log('üìä –°—Ç–∞—Ç—É—Å:', approvedOrder.status);
                
                // –ò—â–µ–º –ø–æ–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ approved –∑–∞–∫–∞–∑–µ
                console.log('\nüë§ –ü–û–õ–Ø –û–ü–ï–†–ê–¢–û–†–ê –í APPROVED –ó–ê–ö–ê–ó–ï:');
                console.log('manager:', approvedOrder.manager);
                console.log('managerName:', approvedOrder.managerName);
                console.log('managerId:', approvedOrder.managerId);
                console.log('createdBy:', approvedOrder.createdBy);
                console.log('updatedBy:', approvedOrder.updatedBy);
                console.log('assignedTo:', approvedOrder.assignedTo);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è approved –∑–∞–∫–∞–∑–∞
                console.log('\nüìã –í–°–ï –ü–û–õ–Ø APPROVED –ó–ê–ö–ê–ó–ê:');
                Object.keys(approvedOrder).forEach(key => {
                    const value = approvedOrder[key];
                    if (value !== null && value !== undefined) {
                        if (typeof value === 'object') {
                            console.log(`üìÅ ${key}:`, JSON.stringify(value, null, 2));
                        } else {
                            console.log(`üìù ${key}: ${value}`);
                        }
                    }
                });
            }
            
            console.log('\nüìã –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –ó–ê–ö–ê–ó–ê:');
            console.log('=' .repeat(50));
            
            // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è –∑–∞–∫–∞–∑–∞
            console.log('üîë ID –∑–∞–∫–∞–∑–∞:', order.id);
            console.log('üìù –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:', order.number);
            console.log('üìä –°—Ç–∞—Ç—É—Å:', order.status);
            
            // –ò—â–µ–º –ø–æ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º/–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
            console.log('\nüë§ –ü–û–õ–Ø –û–ü–ï–†–ê–¢–û–†–ê/–ú–ï–ù–ï–î–ñ–ï–†–ê:');
            console.log('manager:', order.manager);
            console.log('managerName:', order.managerName);
            console.log('managerId:', order.managerId);
            console.log('managerEmail:', order.managerEmail);
            console.log('managerPhone:', order.managerPhone);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            if (order.manager) {
                console.log('\nüìã –û–±—ä–µ–∫—Ç manager:');
                console.log(JSON.stringify(order.manager, null, 2));
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞
            console.log('\nüîç –î–†–£–ì–ò–ï –í–û–ó–ú–û–ñ–ù–´–ï –ü–û–õ–Ø:');
            console.log('createdBy:', order.createdBy);
            console.log('updatedBy:', order.updatedBy);
            console.log('assignedTo:', order.assignedTo);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if (order.contact) {
                console.log('\nüìû –û–±—ä–µ–∫—Ç contact:');
                console.log(JSON.stringify(order.contact, null, 2));
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
            if (order.delivery) {
                console.log('\nüöö –û–±—ä–µ–∫—Ç delivery:');
                console.log(JSON.stringify(order.delivery, null, 2));
            }
            
            // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
            console.log('\nüìã –í–°–ï –î–û–°–¢–£–ü–ù–´–ï –ü–û–õ–Ø:');
            console.log(Object.keys(order).sort());
            
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', response.data.errorMsg);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        if (error.response) {
            console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
            console.error('–î–∞–Ω–Ω—ã–µ:', error.response.data);
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
debugOrderFields();
