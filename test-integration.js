const axios = require('axios');
require('dotenv').config();

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
const testOrder = {
    number: "TEST-001",
    status: "approved",
    manager: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
    deliveryDate: "2024-08-26",
    firstName: "–ü–µ—Ç—Ä",
    lastName: "–ü–µ—Ç—Ä–æ–≤",
    phone: "+233 20 123 4567",
    additionalPhone: "+233 24 987 6543",
    deliveryAddress: "—É–ª. –ê–¥–¥–æ, –¥. 15, –∫–≤. 7",
    city: "–ê–∫–∫—Ä–∞",
    totalSumm: "1500.00",
    items: [
        {
            productName: "–°–º–∞—Ä—Ç—Ñ–æ–Ω Samsung Galaxy",
            quantity: 1
        },
        {
            productName: "–ß–µ—Ö–æ–ª –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            quantity: 2
        }
    ]
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendTestMessage() {
    try {
        const botToken = process.env.TELEGRAM_BOT_TOKEN;
        const channelId = process.env.TELEGRAM_CHANNEL_ID;
        
        if (!botToken || !channelId) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –≤ .env —Ñ–∞–π–ª–µ');
            console.log('–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ');
            return;
        }

        console.log('üß™ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
        
        const response = await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
            chat_id: channelId,
            text: formatOrderMessage(testOrder),
            parse_mode: 'HTML'
        });

        if (response.data.ok) {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!');
            console.log('üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª:', channelId);
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', response.data);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        
        if (error.response) {
            console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
        }
        
        console.log('\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
        console.log('2. –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª');
        console.log('3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞');
        console.log('4. –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º');
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–æ–ø–∏—è –∏–∑ server.js)
function formatOrderMessage(order) {
    const items = order.items || [];
    const itemsText = items.map(item => 
        `‚Ä¢ ${item.productName} - ${item.quantity} —à—Ç.`
    ).join('\n');

    return `üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó –ê–ü–ü–†–£–í–õ–ï–ù!</b>

üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> ${order.number}
üë§ <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> ${order.manager || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÖ <b>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${order.deliveryDate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üë®‚Äçüíº <b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> ${order.firstName} ${order.lastName}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${order.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üì± <b>–î–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω:</b> ${order.additionalPhone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${order.deliveryAddress || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> ${order.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üõçÔ∏è <b>–¢–æ–≤–∞—Ä—ã:</b>
${itemsText}

üí∞ <b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> ${order.totalSumm} ${process.env.CURRENCY || 'GHS'}

‚è∞ <b>–í—Ä–µ–º—è –∞–ø–ø—Ä—É–≤–∞:</b> ${new Date().toLocaleString('ru-RU')}

üß™ <i>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</i>`;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function checkSettings() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...\n');
    
    const required = [
        'TELEGRAM_BOT_TOKEN',
        'TELEGRAM_CHANNEL_ID',
        'RETAILCRM_URL',
        'RETAILCRM_API_KEY'
    ];
    
    let allSet = true;
    
    required.forEach(key => {
        const value = process.env[key];
        if (value) {
            console.log(`‚úÖ ${key}: ${key.includes('TOKEN') || key.includes('KEY') ? '***' + value.slice(-4) : value}`);
        } else {
            console.log(`‚ùå ${key}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
            allSet = false;
        }
    });
    
    console.log('');
    return allSet;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RetailCRM ‚Üí Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n');
    
    if (!checkSettings()) {
        console.log('‚ö†Ô∏è  –ù–µ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example');
        return;
    }
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...\n');
    await sendTestMessage();
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { sendTestMessage, formatOrderMessage };
